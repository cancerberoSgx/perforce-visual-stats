Revieweing the concept of inheritance in Object Oriented (OO) Languages. 

If you are in a class-centric language (like Java, SmallTalk) or at least in a language that support the concept of classes and class inheritance in its own syntax like python, php, etc then you may probably don't need to ask about what is spected from Object Oriented concepts like 'class' or 'inheritance'. 

But, if you are trying to write Object Oriented code in a language that doesn't support those concepts in its syntax then this document is for you. In this article we will try to describe what is spected from entities like a Class, or mechanisms like inheritance and will describe the particular case of implementing this on JavaScript. 

The JavaScript language simply doesn't support the 'class' concept natively. Unlike previously mentioned languages there is not "a way" of defining a class or doing inheritance. So it is up to the JavaScript user to stablish a syntax for defining classes and inheritance because there is no formal way of doing it in the language. As a consequence people you whish to do OO in JavaScript just need to understand exactly whan is spected from a class, and from concepts like inheritance, polimorfism, etc. 

Fortunately, the language support three or four concepts that can be used for easily implement the not supported OO concepts like class definition and inheritance and these are 1) function as a constructor, 2) Objects 3) Object instantiation using new

But we have the concept of 'object' very well supported and a language constructor named 'prototype' that can be used as the basis for building really inheritace. But 'prototype' is not 'extends'...




In particular, the concept of inheritance is mandatory in OO designed -
applications and the definition and implementation os such an instance depends on the user that will have to use concepts existing on the target language like function-as-constructor, new, prototype

TODO: The following two code segments are defining the equivalent classes:

//syntax 1

//class Animal with attribute color
var Animal = function(){
	this.color = 'red'; 
}
Animal.prototype.breath = function(){}
function Lion(){
  Animal.apply(this, arguments); 
} 
Lion.prototype=new Animal();
Lion.prototype.breath = function(){
	Animal.prototype.breath.apply(this, arguments); //call super
}
Lion.prototype.meau = function(){}

And more!. In previous example, from the javascript point of view, both classes are not really equivalent. 


at least not as but we can still define classes specifyemulate there is no class concept   And more, in the context of trying to write Object Oriented code in more dynamic languages like JavaScript
This is not the discussion of Object Oriented Technology (C++, Java) vs. Object Technology (smalltalk). 

The so called OO langauges tend to be more static languages like C++, Java, C#


So we are modeling our problems and writing their sollutions using Object Oriented Programming. 
MANY languages claim to be Object Oriented, but what that really means from the user perspective ? 
What we can expect from out objects and on the mechanisms used for defining our objects (classes, inheritance). 


